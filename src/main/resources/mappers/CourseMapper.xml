<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="inflearn_clone.springboot.mappers.CourseMapper">
    <!-- 강좌 리스트 조회 -->
    <select id="courseList" resultType="inflearn_clone.springboot.domain.CourseVO">
        SELECT
            idx, category, title, description, teacherId, regDate, displayDate, status, price, thumbnail
        FROM tbl_course
        WHERE status = 'Y' AND teacherId = #{memberId}
        ORDER BY regDate DESC
            LIMIT #{offset}, #{limit}
    </select>

    <select id="courseView" parameterType="int">
        SELECT
            c.idx, c.category, c.title, c.description, c.teacherId, c.regDate, c.displayDate, c.modifyDate, c.price, c.thumbnail,
            m.name AS teacherName
        FROM tbl_course c
                 JOIN tbl_member m ON c.teacherId = m.memberId
        WHERE c.idx = #{idx};
    </select>

    <!--teacherId로 존재하는 강의가 있는지 확인-->
    <select id="selectCourseByMemberId" resultType="inflearn_clone.springboot.domain.CourseVO">
        SELECT idx, title
        FROM tbl_course
        WHERE teacherId = #{teacherId};
    </select>

    <!--teacherId에 해당하는 강의 비활성화로 변경-->
    <update id="deleteCourseByMemberId">
        UPDATE tbl_course
        SET status = 'N'
        WHERE teacherId = #{teacherId} AND status = 'Y';
    </update>

    <!-- 강의 삭제 날짜 업데이트-->
    <update id="updateDeleteDate">
        UPDATE tbl_course
        SET deleteDate = #{deleteDate}, status = 'R'
        WHERE idx = #{idx}
    </update>

    <select id="findCoursesToDeleted" resultType="int">
        SELECT idx
        FROM tbl_course
        WHERE deleteDate &lt;= #{now}
        AND status != 'D';
    </select>

    <!-- 강좌 상태 업데이트(스케쥴러 사용) -->
    <update id="updateCourseStatusToDeleted">
        UPDATE tbl_course
        SET status = 'D'
        WHERE deleteDate  &lt;= #{now}
        AND status != 'D'
    </update>

    <!-- 강좌 상태 업데이트(삭제) -->
    <update id="deleteCourse">
        UPDATE tbl_course
        SET status = 'D'
        WHERE idx = #{idx}
    </update>

    <!-- 카테고리 별 강좌 수 -->
    <select id="categoryTotalCnt" resultType="int">
        SELECT COUNT(*)
        FROM tbl_course
        WHERE category = #{category} AND status = 'Y'
    </select>

    <!-- 타입 별 강좌 수 조회 -->
    <select id="allCourseListTotalCnt" resultType="int">
        SELECT COUNT(*)
        FROM tbl_course
        <where>
            <if test="searchCategory != null and searchValue != null">
                <choose>
                    <when test="searchCategory == 'teacherId'">
                        teacherId LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                    <when test="searchCategory == 'title'">
                        title LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                    <when test="searchCategory == 'price'">
                        price LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                    <when test="searchCategory == 'category'">
                        category LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                    <when test="searchCategory == 'status'">
                        status LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                </choose>
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="status == null">
                AND status IN('D', 'N', 'Y', 'R')
            </if>
        </where>

    </select>
    <!-- 강좌 리스트 전체 조회(활성, 비활성, 탈퇴)-->
    <select id="allCourseList" resultType="inflearn_clone.springboot.domain.CourseVO">
        SELECT
            idx, category, title, description, teacherId, regDate, displayDate, status, price, thumbnail
        FROM tbl_course
        <where>
            <if test="searchCategory != null and searchValue != null">
                <choose>
                    <when test="searchCategory == 'teacherId'">
                        teacherId LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                    <when test="searchCategory == 'title'">
                        title LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                    <when test="searchCategory == 'price'">
                        price LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                    <when test="searchCategory == 'category'">
                        category LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                    <when test="searchCategory == 'status'">
                        status LIKE CONCAT('%', #{searchValue}, '%')
                    </when>
                </choose>
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
        <choose>
            <when test="sortQuery != null and sortQuery != ''">
                ${sortQuery}
            </when>
            <otherwise>
                ORDER BY regDate DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{limit}
    </select>

    <select id="courseView1" resultType="inflearn_clone.springboot.domain.CourseVO">
        SELECT idx, category, title, description, teacherId, regDate, displayDate, status, price, thumbnail
        FROM tbl_course
        WHERE idx = #{idx}
    </select>

    <select id="courseTotalCnt1" resultType="int">
        SELECT COUNT(*)
        FROM tbl_course
        <where>
            <if test="searchCategory != null and searchCategory != ''">
                category = #{searchCategory}
            </if>
            <if test="searchValue != null and searchValue != ''">
                AND (
                title LIKE CONCAT('%', #{searchValue}, '%') OR
                teacherId LIKE CONCAT('%', #{searchValue}, '%')
                )
            </if>
        </where>
    </select>

    <select id="courseTotalCnt" resultType="int">
        SELECT COUNT(*)
        FROM tbl_course c
        JOIN tbl_member m ON c.teacherId = m.memberId
        <where>
            <if test="(categoryCodes != null and categoryCodes.size() > 0) or (searchValue != null and searchValue != '')">
                (
                <trim prefixOverrides="OR">
                    <if test="categoryCodes != null and categoryCodes.size() > 0">
                        OR c.category IN
                        <foreach item="code" collection="categoryCodes" open="(" separator="," close=")">
                            #{code}
                        </foreach>
                    </if>
                    <if test="searchValue != null and searchValue != ''">
                        OR c.title LIKE CONCAT('%', #{searchValue}, '%')
                        OR m.name LIKE CONCAT('%', #{searchValue}, '%')
                    </if>
                </trim>
                )
            </if>
            AND c.status = 'Y'
             <![CDATA[
            AND c.displayDate <= NOW()
              ]]>
        </where>
    </select>


    <select id="selectAllCourse" resultType="inflearn_clone.springboot.dto.course.CourseTotalDTO">
        SELECT
        c.idx,
        c.category,
        c.title,
        c.description,
        c.teacherId,
        c.regDate,
        c.displayDate,
        c.status,
        c.price,
        c.thumbnail,
        m.name AS teacherName,
        COALESCE(AVG(r.rating), 0) AS averageRating
        FROM tbl_course c
        JOIN tbl_member m ON c.teacherId = m.memberId
        LEFT JOIN tbl_review r ON c.idx = r.courseIdx
        <where>
            <if test="(categoryCodes != null and categoryCodes.size() > 0) or (searchValue != null and searchValue != '')">
                (
                <trim prefixOverrides="OR">
                    <if test="categoryCodes != null and categoryCodes.size() > 0">
                        OR c.category IN
                        <foreach item="code" collection="categoryCodes" open="(" separator="," close=")">
                            #{code}
                        </foreach>
                    </if>
                    <if test="searchValue != null and searchValue != ''">
                        OR c.title LIKE CONCAT('%', #{searchValue}, '%')
                        OR m.name LIKE CONCAT('%', #{searchValue}, '%')
                    </if>
                </trim>
                )
            </if>
            AND c.status = 'Y'
            <![CDATA[
        AND c.displayDate <= NOW()
        ]]>
        </where>
        GROUP BY c.idx
        ${sortQuery}
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 강좌 등록 -->
    <insert id="insertCourse">
        INSERT INTO tbl_course (category, title, description, teacherId, displayDate, price, thumbnail, status)
        VALUES (#{category}, #{title}, #{description}, #{teacherId}, #{displayDate}, #{price}, #{thumbnail}, 'N')
    </insert>
    <select id="viewMyLastCourse" resultType="inflearn_clone.springboot.domain.CourseVO">
        SELECT * FROM tbl_course
        WHERE teacherId = #{memberId}
        ORDER BY regDate DESC
        LIMIT 1
    </select>
    <select id="selectCourse">
    SELECT idx, title
    FROM tbl_course
    WHERE idx = #{idx};
    </select>
    <select id="selectSection">
        SELECT idx, `section`, courseIdx
        FROM tbl_section
        WHERE courseIdx = #{idx};
    </select>
    <select id="selectLesson">
        SELECT idx, title, sectionIdx
        FROM tbl_lesson
        WHERE sectionIdx IN (SELECT idx FROM tbl_section WHERE courseIdx = #{courseIdx})
    </select>

    <update id="finishInsert">
        UPDATE tbl_course
        SET status = 'Y'
        WHERE idx = #{courseIdx}
    </update>

    <update id="updateCourse">
        UPDATE tbl_course
        SET category = #{category},
            title = #{title},
            description = #{description},
            displayDate = #{displayDate},
            price = #{price},
            <if test="thumbnail != null and thumbnail != ''">
                thumbnail = #{thumbnail},
            </if>
            status = 'N',
            modifyDate = NOW()
        WHERE idx = #{idx}
    </update>

    <update id="processDeleteRequest">
        UPDATE tbl_course
           SET status = 'K'
           WHERE idx=#{courseIdx}
    </update>
    <update id="processDeleteRequestN">
        UPDATE tbl_course
        SET status = 'Y'
        WHERE idx=#{courseIdx}
    </update>
</mapper>

